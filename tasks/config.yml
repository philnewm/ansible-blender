---

# TODO move to dedicated task file
- name: Get GPU
  become: true
  ansible.builtin.shell:
    cmd: "lshw -C display | grep 'vendor' | awk -F ': ' '{print $2}'"
  changed_when: false
  register: gpu_vendor
  failed_when: gpu_vendor.rc != 0

# - name: Get driver
#   when: gpu_vendor.stdout in driver_check.keys()
#   ansible.builtin.shell:
#     cmd: "ldconfig -p | grep -i '{{ driver_check[{{ gpu_vendor.stdout }}]'"
#   changed_when: false
#   register: gpu_driver
#   failed_when: gpu_driver.rc != 0

# WARNING untested
- name: Set compute device
  ansible.builtin.set_fact:
    cycles_compute_device: "{{ cycles_compute_device_type[gpu_vendor.stdout] | default('NONE')}}"

- name: Query settings
  loop: "{{ settings.keys() }}"
  ansible.builtin.shell:
    cmd: |
      blender --background --python-expr "
      import bpy;
      print({{ item }})
      " | sed -n '1p'
  args:
    executable: /bin/bash
  register: settings_output
  changed_when: false

- name: Apply custom settings
  loop: "{{ settings_output.results }}"
  loop_control:
    loop_var: setting
    label: "{{ setting.item }}"
  when: settings[setting.item] | from_yaml | string != setting.stdout
  ansible.builtin.command:
    cmd: |
      blender --background --python-expr "
      import bpy;
      {{ setting.item }} = {{ settings[setting.item] }};
      bpy.ops.wm.save_userpref()"
  register: apply_settings
  changed_when: apply_settings.rc == 0

- name: Query enabled addons
  ansible.builtin.shell:
    cmd: |
      blender --background --python-expr "
      import bpy;
      print(bpy.context.preferences.addons.keys())
      " | sed -n '1p'
  changed_when: false
  args:
    executable: /bin/bash
  register: enabled_addons

- name: Enable addons
  loop: "{{ addons }}"
  loop_control:
    label: "{{ item }}"
  when: item not in enabled_addons.stdout | to_json
  ansible.builtin.command:
    cmd: |
      blender --background --python-expr "
      import bpy;
      bpy.ops.preferences.addon_enable(module='{{ item }}');
      bpy.ops.wm.save_userpref()"
  register: enable_addons
  changed_when: enable_addons.rc == 0

...
