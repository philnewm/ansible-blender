---

# tests to verify role functionality


- name: Check for blender install
  ansible.builtin.stat:
    path: "{{ install_path }}"
  register: blender_path

- name: Test install path
  ansible.builtin.assert:
    that:
      - blender_path.stat.isdir
    quiet: true

- name: Check if blender is available
  ansible.builtin.command:
    cmd: "blender --version"
  register: blender_command
  changed_when: false

- name: Test blender command
  ansible.builtin.assert:
    that:
      - blender_command.rc == 0
    fail_msg: "Blender command failed"
    quiet: true

- name: Get blender tar-ball
  ansible.builtin.stat:
    path: "/opt/blender-{{ version_long }}-linux-{{ architecture }}.tar.xz"
  register: blender_tar_ball

- name: Test tar-ball removed
  ansible.builtin.assert:
    that:
      - not blender_tar_ball.stat.exists
    fail_msg: "Blender tar-ball was not removed"
    quiet: true

- name: Get blender symlink
  ansible.builtin.stat:
    path: "/usr/local/bin/blender"
  register: blender_symlink

- name: Test symlink
  ansible.builtin.assert:
    that:
      - blender_symlink.stat.exists
      - blender_symlink.stat.islnk
      - blender_symlink.stat.lnk_source == "/opt/blender_4.2.3-x64/blender"
    fail_msg: "Blender symlink stats are not as expected, found {{ blender_symlink.stat.lnk_source }}"
    quiet: true

- name: Get blender symlink
  ansible.builtin.stat:
    path: "/usr/share/applications/blender.desktop"
  register: blender_desktop

- name: Test desktop launcher
  ansible.builtin.assert:
    that:
      - blender_desktop.stat.exists
    fail_msg: "Blender desktop file does not exist"
    quiet: true

- name: Query settings
  loop: "{{ settings.keys() }}"
  ansible.builtin.shell:
    cmd: |
      blender --background --python-expr "
      import bpy;
      print({{ item }})
      " | sed -n '1p'
  args:
    executable: /bin/bash
  register: settings_query
  changed_when: false

- name: test settings
  loop: "{{ settings_query.results }}"
  loop_control:
    label: "{{ item.item }}"
  ansible.builtin.assert:
    that: 
      - settings[item.item] | from_yaml | string == item.stdout
    fail_msg: "Expected {{ settings[item.item] }} but got {{ item.stdout }} for {{ item.item }}"
    quiet: true

...